@page "/"
@using Microsoft.AspNetCore.Components.Forms
@inject IContactoServicio Contacto

<div class="main-container">
    <h1 class="page-title">GestiÃ³n de Contactos</h1>
    
    <!-- Debug info -->
    <div style="background: #EE7575FF; padding: 10px; margin: 10px 0; border-radius: 5px; font-size: 12px;">
        Debug: isLoading = @isLoading, contactos.Count = @contactos.Count, contacto = @(contacto?.Nombre ?? "null")
    </div>

    @if (isLoading) {
        <div class="loading-indicator">Cargando...</div>
    }

    @if(contacto == null) {
        <div style="margin: 16px 0;">
            <button class="btn-modern btn-primary-modern" @onclick="() => contacto = new Contacto()" disabled="@isLoading">
                Crear Nuevo Contacto
            </button>
        </div>
        @if (contactos.Count == 0) {
            <div class="no-contacts">
                No hay contactos disponibles. Â¡Crea tu primer contacto!
            </div>
        } else {
            <div class="contacts-list-header">
                <p style="margin: 0; font-weight: 500;">Lista de contactos</p>
                <span class="contacts-count">@contactos.Count contacto@(contactos.Count != 1 ? "s" : "")</span>
            </div>
            <div class="contacts-grid">
                @foreach (var item in contactos) {
                    <div class="contact-card">
                        <div class="contact-header">
                            <div class="contact-avatar">
                                @item.Iniciales
                            </div>
                            <div class="contact-name">
                                <h3 class="contact-full-name">@item.Nombre @item.Apellido</h3>
                            </div>
                        </div>
                        <div class="contact-info">
                            @if (!string.IsNullOrEmpty(item.Telefono)) {
                                <div class="contact-detail">
                                    <span class="contact-detail-icon">ðŸ“ž</span>
                                    <span class="contact-detail-text">@item.Telefono</span>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(item.Email)) {
                                <div class="contact-detail">
                                    <span class="contact-detail-icon">ðŸ“§</span>
                                    <span class="contact-detail-text">@item.Email</span>
                                </div>
                            }
                        </div>
                        <div class="contact-actions">
                            <button class="btn-card-action btn-card-edit"   @onclick="() => Editar(item)">Editar</button>
                            <button class="btn-card-action btn-card-delete" @onclick="() => Borrar(item)">Borrar</button>
                        </div>
                    </div>
                }
            </div>
        }
    } else {
        <div class="form-card">
            <h2 class="form-title">
                @(contacto.Id == 0 ? "Crear Nuevo Contacto" : "Editar Contacto")
            </h2>
            <EditForm Model="@contacto" OnValidSubmit="GuardarContacto">
                <div class="form-group">
                    <label class="form-label">Nombre:</label>
                    <InputText @bind-Value="contacto.Nombre" class="form-input" />
                </div>
                <div class="form-group">
                    <label class="form-label">Apellido:</label>
                    <InputText @bind-Value="contacto.Apellido" class="form-input" />
                </div>
                <div class="form-group">
                    <label class="form-label">TelÃ©fono:</label>
                    <InputText @bind-Value="contacto.Telefono" class="form-input" />
                </div>
                <div class="form-group">
                    <label class="form-label">Email:</label>
                    <InputText @bind-Value="contacto.Email" class="form-input" />
                </div>
                <div class="form-buttons">
                    <button type="submit" class="btn-modern btn-primary-modern">Guardar</button>
                    <button type="button" class="btn-modern btn-secondary-modern" @onclick="() => contacto = null">Cancelar</button>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    Contacto contacto = null;
    List<Contacto> contactos = new();
    bool isLoading = false;

    protected override async Task OnInitializedAsync() {
        Console.WriteLine("Iniciando carga de contactos...");
        await CargarContactos();
    }

    private async Task CargarContactos() {
        Console.WriteLine("CargarContactos: iniciando...");
        isLoading = true;
        StateHasChanged();
        contactos = await Contacto.TraerTodosAsync();
        Console.WriteLine($"CargarContactos: se cargaron {contactos.Count} contactos");
        isLoading = false;
        StateHasChanged();
    }

    void Editar(Contacto item) {
        contacto = new Contacto {
            Id = item.Id,
            Nombre = item.Nombre,
            Apellido = item.Apellido,
            Telefono = item.Telefono,
            Email = item.Email
        };
    }

    async Task Borrar(Contacto item) {
        var resultado = await Contacto.EliminarAsync(item.Id);
        if (resultado) {
            await CargarContactos();
        }
    }

    async Task GuardarContacto() {
        isLoading = true;
        
        if (contacto.Id == 0) {
            await Contacto.CrearAsync(contacto);
        } else {
            await Contacto.ActualizarAsync(contacto);
        }
        
        await CargarContactos();
        contacto = null;
        isLoading = false;
    }
}